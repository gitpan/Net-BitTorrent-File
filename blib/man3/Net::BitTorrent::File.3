.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::BitTorrent::File 3"
.TH Net::BitTorrent::File 3 "2003-10-07" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Net::BitTorrent::File \- Object for manipulating .torrent files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::BitTorrent::File
.Ve
.PP
.Vb 2
\&  # Empty N::BT::File object, ready to be filled with info
\&  my $torrent = new Net::BitTorrent::File;
.Ve
.PP
.Vb 2
\&  # Or, create one from a existing .torrent file
\&  my $fromfile = new Net::BitTorrent::File ('somefile.torrent');
.Ve
.PP
.Vb 3
\&  $torrent->name('Some_File_to_distribute.tar.gz');
\&  $torrent->announce('http://address.of.tracker:6695');
\&  # etc.
.Ve
.PP
.Vb 2
\&  print $torrent->name()."\en";
\&  # would print "Some_File_to_distribute.tar.gz" in this case.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module handles loading and saveing of .torrent files as well as
providing a convenient way to store torrent file info in memory.
Most users of the module will most likely just call the new method
with the name of a existing torrent file and use the data from that.
.SH "USAGE"
.IX Header "USAGE"
The same method is used for setting and retrieving a value, and the
methods have the same name as the key in the torrent file, such as \f(CW\*(C`name()\*(C'\fR,
and \f(CW\*(C`announce()\*(C'\fR. If the method is called with no arguments or a undefined
value, then the current value is returned, otherwise its set to the value
passed in.
.PP
There are two methods for generating info based on torrent data, but not
stored within the torrent itself. These are \f(CW\*(C`gen_info_hash()\*(C'\fR and \f(CW\*(C`gen_pieces_array()\*(C'\fR.
You can use the methods \f(CW\*(C`info_hash()\*(C'\fR and \f(CW\*(C`pieces_array()\*(C'\fR to return the calculated
values after calling there respective \f(CW\*(C`gen_X()\*(C'\fR methods.
.PP
\&\f(CW\*(C`info_hash()\*(C'\fR returns the \s-1SHA1\s0 hash of the info portion of the torrent which is
used in the bittorrent protocol.
.PP
\&\f(CW\*(C`pieces_array()\*(C'\fR returns a array ref of the pieces field of the torrent split
into the individual 20 byte \s-1SHA1\s0 hashes. For further details on what exactly
these are used for, see the docs for the bittorrent protocol mentioned in
the \s-1SEE\s0 \s-1ALSO\s0 section.
.Sh "Methods"
.IX Subsection "Methods"
.IP "\(bu new( [$filename] )" 4
.IX Item "new( [$filename] )"
Creates a new Net::BitTorrent::File object, and if a filename is
supplied will call the load method with that filename.
.ie n .IP "\(bu load( $filename )" 4
.el .IP "\(bu load( \f(CW$filename\fR )" 4
.IX Item "load( $filename )"
Loads the file passed into it and generates the \f(CW\*(C`info_hash\*(C'\fR and \f(CW\*(C`pieces_array\*(C'\fR
propertys.
.ie n .IP "\(bu save( $filename )" 4
.el .IP "\(bu save( \f(CW$filename\fR )" 4
.IX Item "save( $filename )"
Saves the torrent to \fI$filename\fR. Note that \f(CW\*(C`info_hash\*(C'\fR and \f(CW\*(C`pieces_array\*(C'\fR are
not saved to the torrent file and must be regenerated when the torrent is
loaded (but the \f(CW\*(C`load()\*(C'\fR method does this for you anyway).
.IP "\(bu info_hash( [$new_value] )" 4
.IX Item "info_hash( [$new_value] )"
When called with no arguments returns the \fIinfo_hash\fR value, otherwise it sets
it to the value in \fI$new_value\fR. Note: Its very unlikely anyone will be using
to set the value of \fIinfo_hash\fR, rather you should populate all the info
fields then call \f(CW\*(C`gen_info_hash()\*(C'\fR to set this property.
.IP "\(bu gen_info_hash( )" 4
.IX Item "gen_info_hash( )"
Calculates the \s-1SHA1\s0 hash of the torrents \fIinfo\fR field and stores this in the
\&\fIinfo_hash\fR property which can be retrieved using the \f(CW\*(C`info_hash()\*(C'\fR method.
.IP "\(bu pieces_array( [$new_array] )" 4
.IX Item "pieces_array( [$new_array] )"
When called with no arguments returns a array ref whose values are the
\&\s-1SHA1\s0 hashes contained in the \fIpieces\fR property. To set this value, do not use
this method, rather use the \f(CW\*(C`gen_pieces_array()\*(C'\fR method, after setting the
\&\fIpieces\fR property.
.IP "\(bu gen_pieces_array( )" 4
.IX Item "gen_pieces_array( )"
Divides the \fIpieces\fR property into its component 20 byte \s-1SHA1\s0 hashes, and
stores them as a array ref in the \fIpieces_array\fR property.
.IP "\(bu name( [$value] )" 4
.IX Item "name( [$value] )"
When called with no arguments returns the \fIname\fR propertys current value, else
it sets it to \fI$value\fR. If this value is changed, the \fIinfo_hash\fR property needs
to be regenerated.
.IP "\(bu announce( [$value] )" 4
.IX Item "announce( [$value] )"
When called with no arguments returns the \fIannounce\fR propertys current value, else
it sets it to \fI$value\fR.
.IP "\(bu piece_length( [$value] )" 4
.IX Item "piece_length( [$value] )"
When called with no arguments returns the \fIpiece_length\fR propertys current value, else
it sets it to \fI$value\fR. If this value is changed, the \fIinfo_hash\fR property needs
to be regenerated.
.IP "\(bu length( [$value] )" 4
.IX Item "length( [$value] )"
When called with no arguments returns the \fIlength\fR propertys current value, else
it sets it to \fI$value\fR. If this value is changed, the \fIinfo_hash\fR property needs
to be regenerated.
.IP "\(bu pieces( [$value] )" 4
.IX Item "pieces( [$value] )"
When called with no arguments returns the \fIpieces\fR propertys current value, else
it sets it to \fI$value\fR. If this value is changed, the \fIinfo_hash\fR and \fIpieces_array\fR
propertys need to be regenerated.
.IP "\(bu files( [$value] )" 4
.IX Item "files( [$value] )"
When called with no arguments returns the \fIfiles\fR propertys current value, else
it sets it to \fI$value\fR. \fI$value\fR should be a array ref filled with hash refs
containing the keys \fIpath\fR and \fIlength\fR. If this value is changed, the \fIinfo_hash\fR
property needs to be regenerated.
.IP "\(bu info( [$value] )" 4
.IX Item "info( [$value] )"
When called with no arguments returns the \fIinfo\fR propertys current value, else
it sets it to \fI$value\fR. \fI$value\fR should be a hash ref containing the keys
\&\fIfiles\fR, \fIpieces\fR, \fIlength\fR, \fIpiece_length\fR, and \fIname\fR. If this value is changed, the
\&\fIinfo_hash\fR property needs to be regenerated.
.SH "BUGS"
.IX Header "BUGS"
None that I know of yet.
.SH "SUPPORT"
.IX Header "SUPPORT"
Any bugs/suggestions/problems, feel free to send me a e\-mail, I'm usually
glad to help, and enjoy hearing from people using my code. My e\-mail is
listed in the \s-1AUTHOR\s0 section.
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 2
\&        R. Kyle Murphy
\&        orclev@rejectedmaterial.com
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Convert::Bencode, http://bitconjurer.org/BitTorrent/protocol.html
